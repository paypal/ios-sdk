#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FPTI",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// This plugin will maintain a list of class names that have been requested for tracking.
SWIFT_CLASS("_TtC4FPTI17AutoLoggingPlugin")
@interface AutoLoggingPlugin : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, CPLTimingSplit, closed) {
  CPLTimingSplitPreMain = 0,
  CPLTimingSplitAppLaunchComplete = 1,
  CPLTimingSplitHomeScreenLoaded = 2,
  CPLTimingSplitAuthComplete = 3,
};


/// Defines a User Identifier for ELMO. Users for ELMO can be of the following Types :
/// Signed In users ( Account ID )
/// Guid
/// Device ID
SWIFT_PROTOCOL("_TtP4FPTI14UserIdentifier_")
@protocol UserIdentifier
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
@property (nonatomic, readonly, copy) NSString * _Nonnull identifierValue;
@end


SWIFT_CLASS("_TtC4FPTI16DeviceIdentifier")
@interface DeviceIdentifier : NSObject <UserIdentifier>
@property (nonatomic, copy) NSString * _Nonnull key;
@property (nonatomic, copy) NSString * _Nonnull identifierValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Wrapper for Sending Events to the Batch FPTI Server. Initialize this class with a network manager and an event to send.
SWIFT_CLASS("_TtC4FPTI22DispatchEventOperation")
@interface DispatchEventOperation : NSOperation
/// Main function for an Operation object. This is what will be called when the operation is executed.
/// For our purposes, this basically just means that we will send out the events to the batch endpoint.
- (void)main;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC4FPTI22EncryptedAccountNumber")
@interface EncryptedAccountNumber : NSObject <UserIdentifier>
@property (nonatomic, copy) NSString * _Nonnull key;
@property (nonatomic, copy) NSString * _Nonnull identifierValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Sends all FPTI events that are saved in our local store.
/// Since we don’t want a huge payload to be sent over the network, we have to limit the results that
/// we get from our database. This method iteratively fetches ‘n’ number of records from the local store,
/// generate a batch and send it to FPTI.
/// IF FPTI tracking service supports paylaod compressions, we will also try to compress and send the
/// payload.
SWIFT_CLASS("_TtC4FPTI18FPTIBatchOperation")
@interface FPTIBatchOperation : NSOperation
/// This Operation fetches any events that are present in our local Sqlite cache and tries to send it to FPTI.
/// While trying to do so, we query our cache in small sizes and send them in micro-batches. So let’s say if we
/// were to have 100 events cached in our database, we would pick 10 at a time and perform a network call. This
/// number is configurable by the developer.
/// There can be two kinds of errors that may occour while using this method.
/// Error while fetching events / deleting events from our local cache.
/// Error while sending them over the network.
/// In case of network failures, we reinsert these events in the cache and try again later.
/// In case of other errors, we just discard the ‘micro-batch’.
- (void)main;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC4FPTI18FPTINetworkAdapter")
@interface FPTINetworkAdapter : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNotification;
@protocol Logger;

/// <h1>Represents an FPTI Tracker that is capable of tracking events sent to</h1>
/// This Tracker uses the FPTI Batch Tracking API to send data to the server.
/// To enable batching and ensuring persistance, we use a caching layer that keeps the cached data
/// on disk. This will be evicted as soon as the batch size reaches or the timer expires.
/// @note : FPTI (First Party Tracking Infrastructure)
SWIFT_CLASS("_TtC4FPTI11FPTITracker")
@interface FPTITracker : NSObject
/// Objc accessor for singleton
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FPTITracker * _Nonnull sharedInstance;)
+ (FPTITracker * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull urlEndpoint;
- (void)setupTrackingWithRootView:(NSString * _Nonnull)rootView;
/// Flushes any saved events in the database to the server. This method also batches events while
/// sending events over the network and doesn’t send everything at once to avoid any huge payloads.
/// \code
/// Although the large events paylaod scenario is very less probable with our auto flush modes and
/// batch event count monitoring, this takes care of everything independently.
///
/// \endcode
- (void)flushDataWithIsDispatchOnBackgroundNotification:(BOOL)isDispatchOnBackgroundNotification;
/// Sets the tracker Batch Size for FPTI Tracking. This is the max queue size that we will flush
/// events after. We don’t keep any event references in memory. It’s just a counter that triggers an
/// event. Apart from the batch size,the application also initializes a timer that flushes data at
/// regular intervals.
- (void)setBatchSizeWithBufferSize:(NSInteger)bufferSize;
- (void)enableFlushOnLaunch;
- (void)disableFlushOnLaunch;
/// Sets the interval for which we will send the events automatically to the server.
/// This method invalidates the existing timer and starts a new one after the specified duration.
- (void)setFlushIntervalWithFlushTimerIntervalInSeconds:(NSTimeInterval)flushTimerIntervalInSeconds;
/// Invalidates the timer that is associated with this tracker.
/// This can be re enabled by using the setFlushInterval method with the specified timer
/// interval and the app will start firing again.
- (void)disableAutoFlush;
/// Initialize a new session and send a launch event to FPTI.
/// Fire an event if this is not the first time launch.
- (void)appWillBecomeForeGround:(NSNotification * _Nonnull)_;
/// Perform the following operations upon App Launch.
/// Send an event to FPTI
/// If an option flushOnLaunch is Set, then flush all events immediately.
- (void)appDidfinishLaunching:(NSNotification * _Nonnull)_;
- (void)applicationDidEnterBackground:(NSNotification * _Nonnull)_;
- (void)applicationWillBeTerminated:(NSNotification * _Nonnull)_;
- (void)setUserWithUserIdentifier:(NSString * _Nonnull)userIdentifier;
- (void)setLoggerWithLogger:(id <Logger> _Nonnull)logger;
/// Allow client to configure the host domain for where data should flow.
/// The path will remain the same with <code>v1/tracking/batch/events</code>.
/// Failed url generation will result in the default value being used for either Debug or Release modes.
/// \code
///  *- Warning : Not for general use. Please avoid altering this url unless you have a VERY good reason.
///  *- Parameter url : Overriding the default url, string format.
///
/// \endcode
- (void)setUrlWithUrl:(NSString * _Nonnull)url;
/// Send lifecycle events ( default )
- (void)enableLifecycleTracking;
/// Don’t sent lifecycle events
- (void)disableLifecycleTracking;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface FPTITracker (SWIFT_EXTENSION(FPTI))
/// Make a particular parameter persist across this app run. This will filter through
/// the keys / values you have provided and update / add them.
/// <ul>
///   <li>
///     Deprecated: v4.0.0. Use instead <code>setGlobalEventParams</code>.
///   </li>
/// </ul>
- (void)setCustomDictionaryForEvents:(NSDictionary<NSString *, id> * _Nonnull)eventsDicts;
/// Get the current list of persistent parameters set by the client.
/// <ul>
///   <li>
///     Introduced: v3.4.0
///   </li>
/// </ul>
///
/// returns:
/// Current list of persistent parameters.
- (NSDictionary<NSString *, id> * _Nonnull)getGlobalEventParams SWIFT_WARN_UNUSED_RESULT;
@end




@interface FPTITracker (SWIFT_EXTENSION(FPTI))
/// Notification posted when the session id updates.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull FPTITrackerSessionUpdateNotification;)
+ (NSNotificationName _Nonnull)FPTITrackerSessionUpdateNotification SWIFT_WARN_UNUSED_RESULT;
@end

@protocol Measurable;

@interface FPTITracker (SWIFT_EXTENSION(FPTI))
/// Track a timing mark for any measurement. Tracks as a generic type of measurement event (“pf”).
/// <ul>
///   <li>
///     Parameters params : Additional data to pass with the event
///   </li>
/// </ul>
/// \param timer The latency timer you were using to track this particular event
///
- (void)trackLatencyUsing:(id <Measurable> _Nonnull)timer params:(NSDictionary<NSString *, id> * _Nullable)params;
/// Simplest version of the <code>trackEvent</code> function.
/// \param eventType Corresponds to <code>evnt_type</code> tag. Recommend using simple values, such as “im” or “cl”
///
/// \param params Dictionary of data that can be passed with this event.
///
- (void)trackEvent:(NSString * _Nonnull)eventType with:(NSDictionary<NSString *, id> * _Nonnull)params;
@end






SWIFT_CLASS("_TtC4FPTI18GUIDUserIdentifier")
@interface GUIDUserIdentifier : NSObject <UserIdentifier>
@property (nonatomic, copy) NSString * _Nonnull key;
@property (nonatomic, copy) NSString * _Nonnull identifierValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC4FPTI27InMemoryFPTICacheController")
@interface InMemoryFPTICacheController : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class LatencyPayload;

/// Generic timing struct protocol for capturing latency, and other timing
/// meausuremnents.
/// @note: Main purpose is for CPL (Customer Perceived Latency). This generally is referring
/// to the time between the app starting and when the client app considers that the app is ready
/// to be used.
SWIFT_PROTOCOL("_TtP4FPTI10Measurable_")
@protocol Measurable
/// Differentiator for use with multiple measurements
@property (nonatomic, copy) NSString * _Nonnull name;
/// An optional string that can be used for the event key if context is not desired.
@property (nonatomic, copy) NSString * _Nullable tagKey;
/// Time recorded for start of time measurement
@property (nonatomic, readonly) CFTimeInterval start;
/// Time recorded for end of time measurement
@property (nonatomic, readonly) CFTimeInterval end;
/// Whether the timer has been paused already
@property (nonatomic, readonly) BOOL paused;
/// Accumulated difference in time between start and end in seconds, accounting for pause / resume.
@property (nonatomic, readonly) CFTimeInterval elapsed;
/// Flag in case someone accidentally wants to reuse this timer
@property (nonatomic, readonly) BOOL stale;
/// This should be a call to CACurrentMediaTime. Can be accessed at any time and will give a monotonous count of time.
/// Converts mach_absolute_time() to seconds.
/// @note: We are not using CFAbsoluteTimeGetCurrent() as this has variance in it (see documentation
@property (nonatomic, readonly) CFTimeInterval currentTime;
/// Generates a payload object based on this timer’s information
@property (nonatomic, readonly, strong) LatencyPayload * _Nonnull payload;
/// Mark the start of a time measurement
- (void)startMeasurement;
/// Mark the end of a time measurement and return the elapsed time.
- (CFTimeInterval)endMeasurement;
/// “Pause” the timer by aggregating our elapsed time up until now and flagging self as paused.
- (void)pauseMeasurement;
/// “Resume” the timer by resetting the start time if it was paused.
- (void)resumeMeasurement;
@end


/// Simple timer with a little sugar for marking start and end times.
/// Intended to have multiple instances, each with their own context (name) value. They should be
/// registered with the default tracker for continued use.
SWIFT_CLASS("_TtC4FPTI12LatencyTimer")
@interface LatencyTimer : NSObject <Measurable>
@property (nonatomic, readonly) CFTimeInterval currentTime;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nullable tagKey;
@property (nonatomic) CFTimeInterval start;
@property (nonatomic) CFTimeInterval end;
@property (nonatomic) CFTimeInterval elapsed;
@property (nonatomic, readonly) BOOL stale;
@property (nonatomic) BOOL paused;
@property (nonatomic, readonly, strong) LatencyPayload * _Nonnull payload;
- (void)startMeasurement;
- (CFTimeInterval)endMeasurement;
- (void)pauseMeasurement;
- (void)resumeMeasurement;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface LatencyTimer (SWIFT_EXTENSION(FPTI))
@end


/// Generate a payload that is codable to JSON for submission to server
SWIFT_CLASS("_TtCC4FPTI12LatencyTimer14LatencyPayload")
@interface LatencyPayload : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface LatencyTimer (SWIFT_EXTENSION(FPTI))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_PROTOCOL("_TtP4FPTI24LighthouseMeasurementCPL_")
@protocol LighthouseMeasurementCPL
/// This begins our cold launch timer, and will include premain time.
/// <ul>
///   <li>
///     Fetches premain time as compared with DYLD_STATISTICS env flag.
///   </li>
///   <li>
///     Creates a LatencyTimer using the premain start time as its beginning, and offset by the thread time expended up to this point
///     to adjust similarly as Apple does. This is as close as we’ll get to DYLD_STATISTICS.
///   </li>
///   <li>
///     The context of this timer is <code>LaunchCPL.totalCPLContext</code>
///   </li>
///   <li>
///     Segment future points into this timer with this parent conext : <code>LaunchCPL.totalCPLContext</code>
///   </li>
/// </ul>
/// \code
/// // main.swift
/// LighthouseCPL.beginCPLMeasurement()
///
/// // ...
/// UIApplicationMain(argc, argv, nil, NSStringFromClass(AppDelegate.self))
///
/// \endcode\code
/// // AppDelegate.swift
///  func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
///     *
///      // Do normal setup code
///      // ...
///
///      // End of function, measure elapsed time
///     LighthouseCPL.addCPLSplit( section: CPLTimingSplit.appLaunchComplete )
///  }
///
/// \endcode
+ (void)beginCPLMeasurement;
/// End the tracking of cold launch CPL.
/// <ul>
///   <li>
///     Usage:
///   </li>
/// </ul>
/// \code
/// // RootViewController.swift
///
/// func firstPageReadyForUse () {
///
///     // Mark the final section until first point app can be used
///     LighthouseCPL.addCPLSplit( section: CPLTimingSplit.homeScreenLoaded )
///
///     // Complete the measurement and submit the event
///     LighthouseCPL.endCPLMeasurement( params : ["Login" : "First Time", "page"  "Home Screen" ] )
///
/// }
///
/// \endcode\param params Extra data to send with the event
///
+ (void)endCPLMeasurementWithParams:(NSDictionary<NSString *, id> * _Nullable)params;
/// Add predefined segments to your CPL timing.
+ (BOOL)addCPLSplitWithSection:(enum CPLTimingSplit)section error:(NSError * _Nullable * _Nullable)error;
/// Pauses the cpl meausurement
+ (void)pauseCPL;
/// Resumes the cpl measurement
+ (void)resumeCPL;
/// Cancel the cpl measurement
+ (void)cancelCPL;
@end


SWIFT_CLASS("_TtC4FPTI13LighthouseCPL")
@interface LighthouseCPL : NSObject <LighthouseMeasurementCPL>
+ (void)pauseCPL;
+ (void)resumeCPL;
+ (void)cancelCPL;
+ (BOOL)addCPLSplitWithSection:(enum CPLTimingSplit)section error:(NSError * _Nullable * _Nullable)error;
+ (void)beginCPLMeasurement;
+ (void)endCPLMeasurementWithParams:(NSDictionary<NSString *, id> * _Nullable)params;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Protocol for creating a management object for all active timers in the app.
/// note:
/// startMark, finishMark are equivalent to getTimer and createTimer.
/// note:
/// createTimer, getTimer, registerTimer to be deprecated in 4.0.0
SWIFT_PROTOCOL("_TtP4FPTI32LighthouseMeasurementContainable_")
@protocol LighthouseMeasurementContainable
/// Singleton accessor for our measurement containing object.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <LighthouseMeasurementContainable> _Nonnull shared;)
+ (id <LighthouseMeasurementContainable> _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Create a timing mark by key.
/// \param name The key by which you may refer to this mark
///
- (LatencyTimer * _Nonnull)startMarkWithName:(NSString * _Nonnull)name;
- (LatencyTimer * _Nonnull)startMarkWithName:(NSString * _Nonnull)name startTime:(CFTimeInterval)startTime;
/// Create and start a timer, allowing for a parent tag. Children are used to group multiple timers together in a single event.
/// \param name The key by which you may refer to this mark
///
/// \param parentName The key that was used to create a parent timer. If none is found, NO TIMER WILL BE CREATED.
///
- (BOOL)startMarkWithName:(NSString * _Nonnull)name parentName:(NSString * _Nonnull)parentName error:(NSError * _Nullable * _Nullable)error SWIFT_AVAILABILITY(ios,deprecated=4.0.0,message="Use LighthouseMeasurements.shared.addSplit ( named name: String, toParent parentName : String )");
/// Create and start a timer, allowing for a parent tag. Children are used to group multiple timers together in a single event.
/// \param name The key by which you may refer to this mark
///
/// \param parentName The key that was used to create a parent timer. If none is found, NO TIMER WILL BE CREATED.
///
/// \param startTime A provided start time in the case that the start time is not exactly now.
///
- (BOOL)startMarkWithName:(NSString * _Nonnull)name parentName:(NSString * _Nonnull)parentName startTime:(CFTimeInterval)startTime error:(NSError * _Nullable * _Nullable)error SWIFT_AVAILABILITY(ios,deprecated=4.0.0,message="Use LighthouseMeasurements.shared.addSplit ( named name: String, toParent parentName : String )");
/// Mark the time passed since timer start or last child in a parent timer. Children are used to group multiple timers together in a single event.
/// \param named The key by which you may refer to this mark
///
/// \param toParent The key that was used to create a parent timer. If none is found, NO TIMER WILL BE CREATED.
///
- (BOOL)addSplitWithNamed:(NSString * _Nonnull)name toParent:(NSString * _Nonnull)parentName error:(NSError * _Nullable * _Nullable)error;
/// Stop a timing mark by key and tracks the event
/// <ul>
///   <li>
///     Returns the timer now that its been updated.
///   </li>
/// </ul>
/// \param name The key by which you may refer to this mark
///
/// \param params Extra data to send with the event
///
- (LatencyTimer * _Nullable)finishMarkWithName:(NSString * _Nonnull)name params:(NSDictionary<NSString *, id> * _Nullable)params;
/// Stop a timing mark by key. Will also end the final child timer if it is running.
/// note:
/// Recommend using <code>finishMark(name: String, params : [String:Any]? ) -> LatencyTimer?</code> instead, as it will immediately submit the event to FPTI.
/// <ul>
///   <li>
///     Returns the timer now that its been updated.
///   </li>
/// </ul>
/// \param name The key by which you may refer to this mark
///
- (LatencyTimer * _Nullable)finishMarkWithName:(NSString * _Nonnull)name;
/// Pauses a timer and all children.
/// <ul>
///   <li>
///     Returns LatencyTimer instance or nil
///   </li>
/// </ul>
/// \param name The name of the timer previously created
///
- (LatencyTimer * _Nullable)pauseMarkWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Resumes a timer and all children.
/// <ul>
///   <li>
///     Returns LatencyTimer instance or nil
///   </li>
/// </ul>
/// \param name Resumes a timer if it was previously paused
///
- (LatencyTimer * _Nullable)resumeMarkWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Removes a timer completely
/// \param name Name of the timer
///
- (void)cancelMarkWithName:(NSString * _Nonnull)name;
/// Allows for custom timer objects to be registered that conform to the LatencyMeasurement protocol
/// \param customTimer Measurable instance for when a custom Measurable object is desired
///
- (void)registerTimerWithCustomTimer:(LatencyTimer * _Nonnull)customTimer SWIFT_AVAILABILITY(ios,deprecated=4.0.0,message="Use LighthouseMeasurements.shared.startMark ( name: String )");
/// When a timer is created it will be added to the active tracker by context key.
/// This is how one retrieves it to send as an event.
/// <ul>
///   <li>
///     Returns LatencyTimer instance or nil.
///   </li>
/// </ul>
/// \param named String Context key used to create the timer
///
- (LatencyTimer * _Nullable)getTimerWithNamed:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Create a new latency timer for any occasion. This will be stored and managed by the default tracker.
/// note:
/// To be deprecated in 4.0.0
/// <ul>
///   <li>
///     Returns LatencyTimer instance.
///   </li>
/// </ul>
/// \param context String Context for discerning this timer from others.
///
/// \param startImmediately Bool Start this timer now?
///
- (LatencyTimer * _Nonnull)createTimerWithNamed:(NSString * _Nonnull)name startImmediately:(BOOL)startImmediately SWIFT_AVAILABILITY(ios,deprecated=4.0.0);
@end


SWIFT_CLASS("_TtC4FPTI22LighthouseMeasurements")
@interface LighthouseMeasurements : NSObject <LighthouseMeasurementContainable>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <LighthouseMeasurementContainable> _Nonnull shared;)
+ (id <LighthouseMeasurementContainable> _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (LatencyTimer * _Nonnull)startMarkWithName:(NSString * _Nonnull)name;
- (LatencyTimer * _Nonnull)startMarkWithName:(NSString * _Nonnull)name startTime:(CFTimeInterval)startTime;
- (BOOL)startMarkWithName:(NSString * _Nonnull)name parentName:(NSString * _Nonnull)parentName error:(NSError * _Nullable * _Nullable)error;
- (BOOL)startMarkWithName:(NSString * _Nonnull)name parentName:(NSString * _Nonnull)parentName startTime:(CFTimeInterval)startTime error:(NSError * _Nullable * _Nullable)error;
- (BOOL)addSplitWithNamed:(NSString * _Nonnull)name toParent:(NSString * _Nonnull)parentName error:(NSError * _Nullable * _Nullable)error;
- (LatencyTimer * _Nullable)finishMarkWithName:(NSString * _Nonnull)name;
- (LatencyTimer * _Nullable)finishMarkWithName:(NSString * _Nonnull)name params:(NSDictionary<NSString *, id> * _Nullable)params;
- (LatencyTimer * _Nullable)pauseMarkWithName:(NSString * _Nonnull)name;
- (LatencyTimer * _Nullable)resumeMarkWithName:(NSString * _Nonnull)name;
- (void)cancelMarkWithName:(NSString * _Nonnull)name;
- (LatencyTimer * _Nullable)getTimerWithNamed:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (void)registerTimerWithCustomTimer:(LatencyTimer * _Nonnull)customTimer;
- (LatencyTimer * _Nonnull)createTimerWithNamed:(NSString * _Nonnull)name startImmediately:(BOOL)startImmediately;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface LighthouseMeasurements (SWIFT_EXTENSION(FPTI))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_PROTOCOL("_TtP4FPTI6Logger_")
@protocol Logger
- (void)info:(id _Nonnull)msg;
- (void)debug:(id _Nonnull)msg;
- (void)error:(id _Nonnull)msg;
- (void)warning:(id _Nonnull)msg;
@end







/// Operation to save tacked event to our datastore. When an event is tracked, a local couchbase
/// instance stores the event params along with a session id that is maintained and required for FPTI.
/// The event is not immediately sent to FPTI. We leave that part to the tracker itself to keep track of when
/// to send this event.
/// All auto logged parameters are generated by the @FPTIPayloadModel class.
SWIFT_CLASS("_TtC4FPTI19TrackEventOperation")
@interface TrackEventOperation : NSOperation
- (void)main;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface UIViewController (SWIFT_EXTENSION(FPTI))
/// Implementation for UIViewController viewDidAppear along with FPTI Logging.
/// call the Actual View Load first and then call our tracker’s method.
/// Configuring views to track is mandatory for this step. Otherwise, we ignore
/// any track call we receive.
/// @param animated: Bool
- (void)trackableViewDidAppear:(BOOL)animated;
/// View disappearing imp
/// \param animated Bool
///
- (void)trackableViewDidDisappear:(BOOL)animated;
@end








#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FPTI",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// This plugin will maintain a list of class names that have been requested for tracking.
SWIFT_CLASS("_TtC4FPTI17AutoLoggingPlugin")
@interface AutoLoggingPlugin : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, CPLTimingSplit, closed) {
  CPLTimingSplitPreMain = 0,
  CPLTimingSplitAppLaunchComplete = 1,
  CPLTimingSplitHomeScreenLoaded = 2,
  CPLTimingSplitAuthComplete = 3,
};


/// Defines a User Identifier for ELMO. Users for ELMO can be of the following Types :
/// Signed In users ( Account ID )
/// Guid
/// Device ID
SWIFT_PROTOCOL("_TtP4FPTI14UserIdentifier_")
@protocol UserIdentifier
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
@property (nonatomic, readonly, copy) NSString * _Nonnull identifierValue;
@end


SWIFT_CLASS("_TtC4FPTI16DeviceIdentifier")
@interface DeviceIdentifier : NSObject <UserIdentifier>
@property (nonatomic, copy) NSString * _Nonnull key;
@property (nonatomic, copy) NSString * _Nonnull identifierValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Wrapper for Sending Events to the Batch FPTI Server. Initialize this class with a network manager and an event to send.
SWIFT_CLASS("_TtC4FPTI22DispatchEventOperation")
@interface DispatchEventOperation : NSOperation
/// Main function for an Operation object. This is what will be called when the operation is executed.
/// For our purposes, this basically just means that we will send out the events to the batch endpoint.
- (void)main;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC4FPTI22EncryptedAccountNumber")
@interface EncryptedAccountNumber : NSObject <UserIdentifier>
@property (nonatomic, copy) NSString * _Nonnull key;
@property (nonatomic, copy) NSString * _Nonnull identifierValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Sends all FPTI events that are saved in our local store.
/// Since we don’t want a huge payload to be sent over the network, we have to limit the results that
/// we get from our database. This method iteratively fetches ‘n’ number of records from the local store,
/// generate a batch and send it to FPTI.
/// IF FPTI tracking service supports paylaod compressions, we will also try to compress and send the
/// payload.
SWIFT_CLASS("_TtC4FPTI18FPTIBatchOperation")
@interface FPTIBatchOperation : NSOperation
/// This Operation fetches any events that are present in our local Sqlite cache and tries to send it to FPTI.
/// While trying to do so, we query our cache in small sizes and send them in micro-batches. So let’s say if we
/// were to have 100 events cached in our database, we would pick 10 at a time and perform a network call. This
/// number is configurable by the developer.
/// There can be two kinds of errors that may occour while using this method.
/// Error while fetching events / deleting events from our local cache.
/// Error while sending them over the network.
/// In case of network failures, we reinsert these events in the cache and try again later.
/// In case of other errors, we just discard the ‘micro-batch’.
- (void)main;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC4FPTI18FPTINetworkAdapter")
@interface FPTINetworkAdapter : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNotification;
@protocol Logger;

/// <h1>Represents an FPTI Tracker that is capable of tracking events sent to</h1>
/// This Tracker uses the FPTI Batch Tracking API to send data to the server.
/// To enable batching and ensuring persistance, we use a caching layer that keeps the cached data
/// on disk. This will be evicted as soon as the batch size reaches or the timer expires.
/// @note : FPTI (First Party Tracking Infrastructure)
SWIFT_CLASS("_TtC4FPTI11FPTITracker")
@interface FPTITracker : NSObject
/// Objc accessor for singleton
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FPTITracker * _Nonnull sharedInstance;)
+ (FPTITracker * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull urlEndpoint;
- (void)setupTrackingWithRootView:(NSString * _Nonnull)rootView;
/// Flushes any saved events in the database to the server. This method also batches events while
/// sending events over the network and doesn’t send everything at once to avoid any huge payloads.
/// \code
/// Although the large events paylaod scenario is very less probable with our auto flush modes and
/// batch event count monitoring, this takes care of everything independently.
///
/// \endcode
- (void)flushDataWithIsDispatchOnBackgroundNotification:(BOOL)isDispatchOnBackgroundNotification;
/// Sets the tracker Batch Size for FPTI Tracking. This is the max queue size that we will flush
/// events after. We don’t keep any event references in memory. It’s just a counter that triggers an
/// event. Apart from the batch size,the application also initializes a timer that flushes data at
/// regular intervals.
- (void)setBatchSizeWithBufferSize:(NSInteger)bufferSize;
- (void)enableFlushOnLaunch;
- (void)disableFlushOnLaunch;
/// Sets the interval for which we will send the events automatically to the server.
/// This method invalidates the existing timer and starts a new one after the specified duration.
- (void)setFlushIntervalWithFlushTimerIntervalInSeconds:(NSTimeInterval)flushTimerIntervalInSeconds;
/// Invalidates the timer that is associated with this tracker.
/// This can be re enabled by using the setFlushInterval method with the specified timer
/// interval and the app will start firing again.
- (void)disableAutoFlush;
/// Initialize a new session and send a launch event to FPTI.
/// Fire an event if this is not the first time launch.
- (void)appWillBecomeForeGround:(NSNotification * _Nonnull)_;
/// Perform the following operations upon App Launch.
/// Send an event to FPTI
/// If an option flushOnLaunch is Set, then flush all events immediately.
- (void)appDidfinishLaunching:(NSNotification * _Nonnull)_;
- (void)applicationDidEnterBackground:(NSNotification * _Nonnull)_;
- (void)applicationWillBeTerminated:(NSNotification * _Nonnull)_;
- (void)setUserWithUserIdentifier:(NSString * _Nonnull)userIdentifier;
- (void)setLoggerWithLogger:(id <Logger> _Nonnull)logger;
/// Allow client to configure the host domain for where data should flow.
/// The path will remain the same with <code>v1/tracking/batch/events</code>.
/// Failed url generation will result in the default value being used for either Debug or Release modes.
/// \code
///  *- Warning : Not for general use. Please avoid altering this url unless you have a VERY good reason.
///  *- Parameter url : Overriding the default url, string format.
///
/// \endcode
- (void)setUrlWithUrl:(NSString * _Nonnull)url;
/// Send lifecycle events ( default )
- (void)enableLifecycleTracking;
/// Don’t sent lifecycle events
- (void)disableLifecycleTracking;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface FPTITracker (SWIFT_EXTENSION(FPTI))
/// Make a particular parameter persist across this app run. This will filter through
/// the keys / values you have provided and update / add them.
/// <ul>
///   <li>
///     Deprecated: v4.0.0. Use instead <code>setGlobalEventParams</code>.
///   </li>
/// </ul>
- (void)setCustomDictionaryForEvents:(NSDictionary<NSString *, id> * _Nonnull)eventsDicts;
/// Get the current list of persistent parameters set by the client.
/// <ul>
///   <li>
///     Introduced: v3.4.0
///   </li>
/// </ul>
///
/// returns:
/// Current list of persistent parameters.
- (NSDictionary<NSString *, id> * _Nonnull)getGlobalEventParams SWIFT_WARN_UNUSED_RESULT;
@end




@interface FPTITracker (SWIFT_EXTENSION(FPTI))
/// Notification posted when the session id updates.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull FPTITrackerSessionUpdateNotification;)
+ (NSNotificationName _Nonnull)FPTITrackerSessionUpdateNotification SWIFT_WARN_UNUSED_RESULT;
@end

@protocol Measurable;

@interface FPTITracker (SWIFT_EXTENSION(FPTI))
/// Track a timing mark for any measurement. Tracks as a generic type of measurement event (“pf”).
/// <ul>
///   <li>
///     Parameters params : Additional data to pass with the event
///   </li>
/// </ul>
/// \param timer The latency timer you were using to track this particular event
///
- (void)trackLatencyUsing:(id <Measurable> _Nonnull)timer params:(NSDictionary<NSString *, id> * _Nullable)params;
/// Simplest version of the <code>trackEvent</code> function.
/// \param eventType Corresponds to <code>evnt_type</code> tag. Recommend using simple values, such as “im” or “cl”
///
/// \param params Dictionary of data that can be passed with this event.
///
- (void)trackEvent:(NSString * _Nonnull)eventType with:(NSDictionary<NSString *, id> * _Nonnull)params;
@end






SWIFT_CLASS("_TtC4FPTI18GUIDUserIdentifier")
@interface GUIDUserIdentifier : NSObject <UserIdentifier>
@property (nonatomic, copy) NSString * _Nonnull key;
@property (nonatomic, copy) NSString * _Nonnull identifierValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC4FPTI27InMemoryFPTICacheController")
@interface InMemoryFPTICacheController : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class LatencyPayload;

/// Generic timing struct protocol for capturing latency, and other timing
/// meausuremnents.
/// @note: Main purpose is for CPL (Customer Perceived Latency). This generally is referring
/// to the time between the app starting and when the client app considers that the app is ready
/// to be used.
SWIFT_PROTOCOL("_TtP4FPTI10Measurable_")
@protocol Measurable
/// Differentiator for use with multiple measurements
@property (nonatomic, copy) NSString * _Nonnull name;
/// An optional string that can be used for the event key if context is not desired.
@property (nonatomic, copy) NSString * _Nullable tagKey;
/// Time recorded for start of time measurement
@property (nonatomic, readonly) CFTimeInterval start;
/// Time recorded for end of time measurement
@property (nonatomic, readonly) CFTimeInterval end;
/// Whether the timer has been paused already
@property (nonatomic, readonly) BOOL paused;
/// Accumulated difference in time between start and end in seconds, accounting for pause / resume.
@property (nonatomic, readonly) CFTimeInterval elapsed;
/// Flag in case someone accidentally wants to reuse this timer
@property (nonatomic, readonly) BOOL stale;
/// This should be a call to CACurrentMediaTime. Can be accessed at any time and will give a monotonous count of time.
/// Converts mach_absolute_time() to seconds.
/// @note: We are not using CFAbsoluteTimeGetCurrent() as this has variance in it (see documentation
@property (nonatomic, readonly) CFTimeInterval currentTime;
/// Generates a payload object based on this timer’s information
@property (nonatomic, readonly, strong) LatencyPayload * _Nonnull payload;
/// Mark the start of a time measurement
- (void)startMeasurement;
/// Mark the end of a time measurement and return the elapsed time.
- (CFTimeInterval)endMeasurement;
/// “Pause” the timer by aggregating our elapsed time up until now and flagging self as paused.
- (void)pauseMeasurement;
/// “Resume” the timer by resetting the start time if it was paused.
- (void)resumeMeasurement;
@end


/// Simple timer with a little sugar for marking start and end times.
/// Intended to have multiple instances, each with their own context (name) value. They should be
/// registered with the default tracker for continued use.
SWIFT_CLASS("_TtC4FPTI12LatencyTimer")
@interface LatencyTimer : NSObject <Measurable>
@property (nonatomic, readonly) CFTimeInterval currentTime;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nullable tagKey;
@property (nonatomic) CFTimeInterval start;
@property (nonatomic) CFTimeInterval end;
@property (nonatomic) CFTimeInterval elapsed;
@property (nonatomic, readonly) BOOL stale;
@property (nonatomic) BOOL paused;
@property (nonatomic, readonly, strong) LatencyPayload * _Nonnull payload;
- (void)startMeasurement;
- (CFTimeInterval)endMeasurement;
- (void)pauseMeasurement;
- (void)resumeMeasurement;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface LatencyTimer (SWIFT_EXTENSION(FPTI))
@end


/// Generate a payload that is codable to JSON for submission to server
SWIFT_CLASS("_TtCC4FPTI12LatencyTimer14LatencyPayload")
@interface LatencyPayload : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface LatencyTimer (SWIFT_EXTENSION(FPTI))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_PROTOCOL("_TtP4FPTI24LighthouseMeasurementCPL_")
@protocol LighthouseMeasurementCPL
/// This begins our cold launch timer, and will include premain time.
/// <ul>
///   <li>
///     Fetches premain time as compared with DYLD_STATISTICS env flag.
///   </li>
///   <li>
///     Creates a LatencyTimer using the premain start time as its beginning, and offset by the thread time expended up to this point
///     to adjust similarly as Apple does. This is as close as we’ll get to DYLD_STATISTICS.
///   </li>
///   <li>
///     The context of this timer is <code>LaunchCPL.totalCPLContext</code>
///   </li>
///   <li>
///     Segment future points into this timer with this parent conext : <code>LaunchCPL.totalCPLContext</code>
///   </li>
/// </ul>
/// \code
/// // main.swift
/// LighthouseCPL.beginCPLMeasurement()
///
/// // ...
/// UIApplicationMain(argc, argv, nil, NSStringFromClass(AppDelegate.self))
///
/// \endcode\code
/// // AppDelegate.swift
///  func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
///     *
///      // Do normal setup code
///      // ...
///
///      // End of function, measure elapsed time
///     LighthouseCPL.addCPLSplit( section: CPLTimingSplit.appLaunchComplete )
///  }
///
/// \endcode
+ (void)beginCPLMeasurement;
/// End the tracking of cold launch CPL.
/// <ul>
///   <li>
///     Usage:
///   </li>
/// </ul>
/// \code
/// // RootViewController.swift
///
/// func firstPageReadyForUse () {
///
///     // Mark the final section until first point app can be used
///     LighthouseCPL.addCPLSplit( section: CPLTimingSplit.homeScreenLoaded )
///
///     // Complete the measurement and submit the event
///     LighthouseCPL.endCPLMeasurement( params : ["Login" : "First Time", "page"  "Home Screen" ] )
///
/// }
///
/// \endcode\param params Extra data to send with the event
///
+ (void)endCPLMeasurementWithParams:(NSDictionary<NSString *, id> * _Nullable)params;
/// Add predefined segments to your CPL timing.
+ (BOOL)addCPLSplitWithSection:(enum CPLTimingSplit)section error:(NSError * _Nullable * _Nullable)error;
/// Pauses the cpl meausurement
+ (void)pauseCPL;
/// Resumes the cpl measurement
+ (void)resumeCPL;
/// Cancel the cpl measurement
+ (void)cancelCPL;
@end


SWIFT_CLASS("_TtC4FPTI13LighthouseCPL")
@interface LighthouseCPL : NSObject <LighthouseMeasurementCPL>
+ (void)pauseCPL;
+ (void)resumeCPL;
+ (void)cancelCPL;
+ (BOOL)addCPLSplitWithSection:(enum CPLTimingSplit)section error:(NSError * _Nullable * _Nullable)error;
+ (void)beginCPLMeasurement;
+ (void)endCPLMeasurementWithParams:(NSDictionary<NSString *, id> * _Nullable)params;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Protocol for creating a management object for all active timers in the app.
/// note:
/// startMark, finishMark are equivalent to getTimer and createTimer.
/// note:
/// createTimer, getTimer, registerTimer to be deprecated in 4.0.0
SWIFT_PROTOCOL("_TtP4FPTI32LighthouseMeasurementContainable_")
@protocol LighthouseMeasurementContainable
/// Singleton accessor for our measurement containing object.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <LighthouseMeasurementContainable> _Nonnull shared;)
+ (id <LighthouseMeasurementContainable> _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Create a timing mark by key.
/// \param name The key by which you may refer to this mark
///
- (LatencyTimer * _Nonnull)startMarkWithName:(NSString * _Nonnull)name;
- (LatencyTimer * _Nonnull)startMarkWithName:(NSString * _Nonnull)name startTime:(CFTimeInterval)startTime;
/// Create and start a timer, allowing for a parent tag. Children are used to group multiple timers together in a single event.
/// \param name The key by which you may refer to this mark
///
/// \param parentName The key that was used to create a parent timer. If none is found, NO TIMER WILL BE CREATED.
///
- (BOOL)startMarkWithName:(NSString * _Nonnull)name parentName:(NSString * _Nonnull)parentName error:(NSError * _Nullable * _Nullable)error SWIFT_AVAILABILITY(ios,deprecated=4.0.0,message="Use LighthouseMeasurements.shared.addSplit ( named name: String, toParent parentName : String )");
/// Create and start a timer, allowing for a parent tag. Children are used to group multiple timers together in a single event.
/// \param name The key by which you may refer to this mark
///
/// \param parentName The key that was used to create a parent timer. If none is found, NO TIMER WILL BE CREATED.
///
/// \param startTime A provided start time in the case that the start time is not exactly now.
///
- (BOOL)startMarkWithName:(NSString * _Nonnull)name parentName:(NSString * _Nonnull)parentName startTime:(CFTimeInterval)startTime error:(NSError * _Nullable * _Nullable)error SWIFT_AVAILABILITY(ios,deprecated=4.0.0,message="Use LighthouseMeasurements.shared.addSplit ( named name: String, toParent parentName : String )");
/// Mark the time passed since timer start or last child in a parent timer. Children are used to group multiple timers together in a single event.
/// \param named The key by which you may refer to this mark
///
/// \param toParent The key that was used to create a parent timer. If none is found, NO TIMER WILL BE CREATED.
///
- (BOOL)addSplitWithNamed:(NSString * _Nonnull)name toParent:(NSString * _Nonnull)parentName error:(NSError * _Nullable * _Nullable)error;
/// Stop a timing mark by key and tracks the event
/// <ul>
///   <li>
///     Returns the timer now that its been updated.
///   </li>
/// </ul>
/// \param name The key by which you may refer to this mark
///
/// \param params Extra data to send with the event
///
- (LatencyTimer * _Nullable)finishMarkWithName:(NSString * _Nonnull)name params:(NSDictionary<NSString *, id> * _Nullable)params;
/// Stop a timing mark by key. Will also end the final child timer if it is running.
/// note:
/// Recommend using <code>finishMark(name: String, params : [String:Any]? ) -> LatencyTimer?</code> instead, as it will immediately submit the event to FPTI.
/// <ul>
///   <li>
///     Returns the timer now that its been updated.
///   </li>
/// </ul>
/// \param name The key by which you may refer to this mark
///
- (LatencyTimer * _Nullable)finishMarkWithName:(NSString * _Nonnull)name;
/// Pauses a timer and all children.
/// <ul>
///   <li>
///     Returns LatencyTimer instance or nil
///   </li>
/// </ul>
/// \param name The name of the timer previously created
///
- (LatencyTimer * _Nullable)pauseMarkWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Resumes a timer and all children.
/// <ul>
///   <li>
///     Returns LatencyTimer instance or nil
///   </li>
/// </ul>
/// \param name Resumes a timer if it was previously paused
///
- (LatencyTimer * _Nullable)resumeMarkWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Removes a timer completely
/// \param name Name of the timer
///
- (void)cancelMarkWithName:(NSString * _Nonnull)name;
/// Allows for custom timer objects to be registered that conform to the LatencyMeasurement protocol
/// \param customTimer Measurable instance for when a custom Measurable object is desired
///
- (void)registerTimerWithCustomTimer:(LatencyTimer * _Nonnull)customTimer SWIFT_AVAILABILITY(ios,deprecated=4.0.0,message="Use LighthouseMeasurements.shared.startMark ( name: String )");
/// When a timer is created it will be added to the active tracker by context key.
/// This is how one retrieves it to send as an event.
/// <ul>
///   <li>
///     Returns LatencyTimer instance or nil.
///   </li>
/// </ul>
/// \param named String Context key used to create the timer
///
- (LatencyTimer * _Nullable)getTimerWithNamed:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Create a new latency timer for any occasion. This will be stored and managed by the default tracker.
/// note:
/// To be deprecated in 4.0.0
/// <ul>
///   <li>
///     Returns LatencyTimer instance.
///   </li>
/// </ul>
/// \param context String Context for discerning this timer from others.
///
/// \param startImmediately Bool Start this timer now?
///
- (LatencyTimer * _Nonnull)createTimerWithNamed:(NSString * _Nonnull)name startImmediately:(BOOL)startImmediately SWIFT_AVAILABILITY(ios,deprecated=4.0.0);
@end


SWIFT_CLASS("_TtC4FPTI22LighthouseMeasurements")
@interface LighthouseMeasurements : NSObject <LighthouseMeasurementContainable>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <LighthouseMeasurementContainable> _Nonnull shared;)
+ (id <LighthouseMeasurementContainable> _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (LatencyTimer * _Nonnull)startMarkWithName:(NSString * _Nonnull)name;
- (LatencyTimer * _Nonnull)startMarkWithName:(NSString * _Nonnull)name startTime:(CFTimeInterval)startTime;
- (BOOL)startMarkWithName:(NSString * _Nonnull)name parentName:(NSString * _Nonnull)parentName error:(NSError * _Nullable * _Nullable)error;
- (BOOL)startMarkWithName:(NSString * _Nonnull)name parentName:(NSString * _Nonnull)parentName startTime:(CFTimeInterval)startTime error:(NSError * _Nullable * _Nullable)error;
- (BOOL)addSplitWithNamed:(NSString * _Nonnull)name toParent:(NSString * _Nonnull)parentName error:(NSError * _Nullable * _Nullable)error;
- (LatencyTimer * _Nullable)finishMarkWithName:(NSString * _Nonnull)name;
- (LatencyTimer * _Nullable)finishMarkWithName:(NSString * _Nonnull)name params:(NSDictionary<NSString *, id> * _Nullable)params;
- (LatencyTimer * _Nullable)pauseMarkWithName:(NSString * _Nonnull)name;
- (LatencyTimer * _Nullable)resumeMarkWithName:(NSString * _Nonnull)name;
- (void)cancelMarkWithName:(NSString * _Nonnull)name;
- (LatencyTimer * _Nullable)getTimerWithNamed:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (void)registerTimerWithCustomTimer:(LatencyTimer * _Nonnull)customTimer;
- (LatencyTimer * _Nonnull)createTimerWithNamed:(NSString * _Nonnull)name startImmediately:(BOOL)startImmediately;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface LighthouseMeasurements (SWIFT_EXTENSION(FPTI))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_PROTOCOL("_TtP4FPTI6Logger_")
@protocol Logger
- (void)info:(id _Nonnull)msg;
- (void)debug:(id _Nonnull)msg;
- (void)error:(id _Nonnull)msg;
- (void)warning:(id _Nonnull)msg;
@end







/// Operation to save tacked event to our datastore. When an event is tracked, a local couchbase
/// instance stores the event params along with a session id that is maintained and required for FPTI.
/// The event is not immediately sent to FPTI. We leave that part to the tracker itself to keep track of when
/// to send this event.
/// All auto logged parameters are generated by the @FPTIPayloadModel class.
SWIFT_CLASS("_TtC4FPTI19TrackEventOperation")
@interface TrackEventOperation : NSOperation
- (void)main;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface UIViewController (SWIFT_EXTENSION(FPTI))
/// Implementation for UIViewController viewDidAppear along with FPTI Logging.
/// call the Actual View Load first and then call our tracker’s method.
/// Configuring views to track is mandatory for this step. Otherwise, we ignore
/// any track call we receive.
/// @param animated: Bool
- (void)trackableViewDidAppear:(BOOL)animated;
/// View disappearing imp
/// \param animated Bool
///
- (void)trackableViewDidDisappear:(BOOL)animated;
@end








#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FPTI",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// This plugin will maintain a list of class names that have been requested for tracking.
SWIFT_CLASS("_TtC4FPTI17AutoLoggingPlugin")
@interface AutoLoggingPlugin : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, CPLTimingSplit, closed) {
  CPLTimingSplitPreMain = 0,
  CPLTimingSplitAppLaunchComplete = 1,
  CPLTimingSplitHomeScreenLoaded = 2,
  CPLTimingSplitAuthComplete = 3,
};


/// Defines a User Identifier for ELMO. Users for ELMO can be of the following Types :
/// Signed In users ( Account ID )
/// Guid
/// Device ID
SWIFT_PROTOCOL("_TtP4FPTI14UserIdentifier_")
@protocol UserIdentifier
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
@property (nonatomic, readonly, copy) NSString * _Nonnull identifierValue;
@end


SWIFT_CLASS("_TtC4FPTI16DeviceIdentifier")
@interface DeviceIdentifier : NSObject <UserIdentifier>
@property (nonatomic, copy) NSString * _Nonnull key;
@property (nonatomic, copy) NSString * _Nonnull identifierValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Wrapper for Sending Events to the Batch FPTI Server. Initialize this class with a network manager and an event to send.
SWIFT_CLASS("_TtC4FPTI22DispatchEventOperation")
@interface DispatchEventOperation : NSOperation
/// Main function for an Operation object. This is what will be called when the operation is executed.
/// For our purposes, this basically just means that we will send out the events to the batch endpoint.
- (void)main;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC4FPTI22EncryptedAccountNumber")
@interface EncryptedAccountNumber : NSObject <UserIdentifier>
@property (nonatomic, copy) NSString * _Nonnull key;
@property (nonatomic, copy) NSString * _Nonnull identifierValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Sends all FPTI events that are saved in our local store.
/// Since we don’t want a huge payload to be sent over the network, we have to limit the results that
/// we get from our database. This method iteratively fetches ‘n’ number of records from the local store,
/// generate a batch and send it to FPTI.
/// IF FPTI tracking service supports paylaod compressions, we will also try to compress and send the
/// payload.
SWIFT_CLASS("_TtC4FPTI18FPTIBatchOperation")
@interface FPTIBatchOperation : NSOperation
/// This Operation fetches any events that are present in our local Sqlite cache and tries to send it to FPTI.
/// While trying to do so, we query our cache in small sizes and send them in micro-batches. So let’s say if we
/// were to have 100 events cached in our database, we would pick 10 at a time and perform a network call. This
/// number is configurable by the developer.
/// There can be two kinds of errors that may occour while using this method.
/// Error while fetching events / deleting events from our local cache.
/// Error while sending them over the network.
/// In case of network failures, we reinsert these events in the cache and try again later.
/// In case of other errors, we just discard the ‘micro-batch’.
- (void)main;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC4FPTI18FPTINetworkAdapter")
@interface FPTINetworkAdapter : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNotification;
@protocol Logger;

/// <h1>Represents an FPTI Tracker that is capable of tracking events sent to</h1>
/// This Tracker uses the FPTI Batch Tracking API to send data to the server.
/// To enable batching and ensuring persistance, we use a caching layer that keeps the cached data
/// on disk. This will be evicted as soon as the batch size reaches or the timer expires.
/// @note : FPTI (First Party Tracking Infrastructure)
SWIFT_CLASS("_TtC4FPTI11FPTITracker")
@interface FPTITracker : NSObject
/// Objc accessor for singleton
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FPTITracker * _Nonnull sharedInstance;)
+ (FPTITracker * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull urlEndpoint;
- (void)setupTrackingWithRootView:(NSString * _Nonnull)rootView;
/// Flushes any saved events in the database to the server. This method also batches events while
/// sending events over the network and doesn’t send everything at once to avoid any huge payloads.
/// \code
/// Although the large events paylaod scenario is very less probable with our auto flush modes and
/// batch event count monitoring, this takes care of everything independently.
///
/// \endcode
- (void)flushDataWithIsDispatchOnBackgroundNotification:(BOOL)isDispatchOnBackgroundNotification;
/// Sets the tracker Batch Size for FPTI Tracking. This is the max queue size that we will flush
/// events after. We don’t keep any event references in memory. It’s just a counter that triggers an
/// event. Apart from the batch size,the application also initializes a timer that flushes data at
/// regular intervals.
- (void)setBatchSizeWithBufferSize:(NSInteger)bufferSize;
- (void)enableFlushOnLaunch;
- (void)disableFlushOnLaunch;
/// Sets the interval for which we will send the events automatically to the server.
/// This method invalidates the existing timer and starts a new one after the specified duration.
- (void)setFlushIntervalWithFlushTimerIntervalInSeconds:(NSTimeInterval)flushTimerIntervalInSeconds;
/// Invalidates the timer that is associated with this tracker.
/// This can be re enabled by using the setFlushInterval method with the specified timer
/// interval and the app will start firing again.
- (void)disableAutoFlush;
/// Initialize a new session and send a launch event to FPTI.
/// Fire an event if this is not the first time launch.
- (void)appWillBecomeForeGround:(NSNotification * _Nonnull)_;
/// Perform the following operations upon App Launch.
/// Send an event to FPTI
/// If an option flushOnLaunch is Set, then flush all events immediately.
- (void)appDidfinishLaunching:(NSNotification * _Nonnull)_;
- (void)applicationDidEnterBackground:(NSNotification * _Nonnull)_;
- (void)applicationWillBeTerminated:(NSNotification * _Nonnull)_;
- (void)setUserWithUserIdentifier:(NSString * _Nonnull)userIdentifier;
- (void)setLoggerWithLogger:(id <Logger> _Nonnull)logger;
/// Allow client to configure the host domain for where data should flow.
/// The path will remain the same with <code>v1/tracking/batch/events</code>.
/// Failed url generation will result in the default value being used for either Debug or Release modes.
/// \code
///  *- Warning : Not for general use. Please avoid altering this url unless you have a VERY good reason.
///  *- Parameter url : Overriding the default url, string format.
///
/// \endcode
- (void)setUrlWithUrl:(NSString * _Nonnull)url;
/// Send lifecycle events ( default )
- (void)enableLifecycleTracking;
/// Don’t sent lifecycle events
- (void)disableLifecycleTracking;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface FPTITracker (SWIFT_EXTENSION(FPTI))
/// Make a particular parameter persist across this app run. This will filter through
/// the keys / values you have provided and update / add them.
/// <ul>
///   <li>
///     Deprecated: v4.0.0. Use instead <code>setGlobalEventParams</code>.
///   </li>
/// </ul>
- (void)setCustomDictionaryForEvents:(NSDictionary<NSString *, id> * _Nonnull)eventsDicts;
/// Get the current list of persistent parameters set by the client.
/// <ul>
///   <li>
///     Introduced: v3.4.0
///   </li>
/// </ul>
///
/// returns:
/// Current list of persistent parameters.
- (NSDictionary<NSString *, id> * _Nonnull)getGlobalEventParams SWIFT_WARN_UNUSED_RESULT;
@end




@interface FPTITracker (SWIFT_EXTENSION(FPTI))
/// Notification posted when the session id updates.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull FPTITrackerSessionUpdateNotification;)
+ (NSNotificationName _Nonnull)FPTITrackerSessionUpdateNotification SWIFT_WARN_UNUSED_RESULT;
@end

@protocol Measurable;

@interface FPTITracker (SWIFT_EXTENSION(FPTI))
/// Track a timing mark for any measurement. Tracks as a generic type of measurement event (“pf”).
/// <ul>
///   <li>
///     Parameters params : Additional data to pass with the event
///   </li>
/// </ul>
/// \param timer The latency timer you were using to track this particular event
///
- (void)trackLatencyUsing:(id <Measurable> _Nonnull)timer params:(NSDictionary<NSString *, id> * _Nullable)params;
/// Simplest version of the <code>trackEvent</code> function.
/// \param eventType Corresponds to <code>evnt_type</code> tag. Recommend using simple values, such as “im” or “cl”
///
/// \param params Dictionary of data that can be passed with this event.
///
- (void)trackEvent:(NSString * _Nonnull)eventType with:(NSDictionary<NSString *, id> * _Nonnull)params;
@end






SWIFT_CLASS("_TtC4FPTI18GUIDUserIdentifier")
@interface GUIDUserIdentifier : NSObject <UserIdentifier>
@property (nonatomic, copy) NSString * _Nonnull key;
@property (nonatomic, copy) NSString * _Nonnull identifierValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC4FPTI27InMemoryFPTICacheController")
@interface InMemoryFPTICacheController : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class LatencyPayload;

/// Generic timing struct protocol for capturing latency, and other timing
/// meausuremnents.
/// @note: Main purpose is for CPL (Customer Perceived Latency). This generally is referring
/// to the time between the app starting and when the client app considers that the app is ready
/// to be used.
SWIFT_PROTOCOL("_TtP4FPTI10Measurable_")
@protocol Measurable
/// Differentiator for use with multiple measurements
@property (nonatomic, copy) NSString * _Nonnull name;
/// An optional string that can be used for the event key if context is not desired.
@property (nonatomic, copy) NSString * _Nullable tagKey;
/// Time recorded for start of time measurement
@property (nonatomic, readonly) CFTimeInterval start;
/// Time recorded for end of time measurement
@property (nonatomic, readonly) CFTimeInterval end;
/// Whether the timer has been paused already
@property (nonatomic, readonly) BOOL paused;
/// Accumulated difference in time between start and end in seconds, accounting for pause / resume.
@property (nonatomic, readonly) CFTimeInterval elapsed;
/// Flag in case someone accidentally wants to reuse this timer
@property (nonatomic, readonly) BOOL stale;
/// This should be a call to CACurrentMediaTime. Can be accessed at any time and will give a monotonous count of time.
/// Converts mach_absolute_time() to seconds.
/// @note: We are not using CFAbsoluteTimeGetCurrent() as this has variance in it (see documentation
@property (nonatomic, readonly) CFTimeInterval currentTime;
/// Generates a payload object based on this timer’s information
@property (nonatomic, readonly, strong) LatencyPayload * _Nonnull payload;
/// Mark the start of a time measurement
- (void)startMeasurement;
/// Mark the end of a time measurement and return the elapsed time.
- (CFTimeInterval)endMeasurement;
/// “Pause” the timer by aggregating our elapsed time up until now and flagging self as paused.
- (void)pauseMeasurement;
/// “Resume” the timer by resetting the start time if it was paused.
- (void)resumeMeasurement;
@end


/// Simple timer with a little sugar for marking start and end times.
/// Intended to have multiple instances, each with their own context (name) value. They should be
/// registered with the default tracker for continued use.
SWIFT_CLASS("_TtC4FPTI12LatencyTimer")
@interface LatencyTimer : NSObject <Measurable>
@property (nonatomic, readonly) CFTimeInterval currentTime;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nullable tagKey;
@property (nonatomic) CFTimeInterval start;
@property (nonatomic) CFTimeInterval end;
@property (nonatomic) CFTimeInterval elapsed;
@property (nonatomic, readonly) BOOL stale;
@property (nonatomic) BOOL paused;
@property (nonatomic, readonly, strong) LatencyPayload * _Nonnull payload;
- (void)startMeasurement;
- (CFTimeInterval)endMeasurement;
- (void)pauseMeasurement;
- (void)resumeMeasurement;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface LatencyTimer (SWIFT_EXTENSION(FPTI))
@end


/// Generate a payload that is codable to JSON for submission to server
SWIFT_CLASS("_TtCC4FPTI12LatencyTimer14LatencyPayload")
@interface LatencyPayload : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface LatencyTimer (SWIFT_EXTENSION(FPTI))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_PROTOCOL("_TtP4FPTI24LighthouseMeasurementCPL_")
@protocol LighthouseMeasurementCPL
/// This begins our cold launch timer, and will include premain time.
/// <ul>
///   <li>
///     Fetches premain time as compared with DYLD_STATISTICS env flag.
///   </li>
///   <li>
///     Creates a LatencyTimer using the premain start time as its beginning, and offset by the thread time expended up to this point
///     to adjust similarly as Apple does. This is as close as we’ll get to DYLD_STATISTICS.
///   </li>
///   <li>
///     The context of this timer is <code>LaunchCPL.totalCPLContext</code>
///   </li>
///   <li>
///     Segment future points into this timer with this parent conext : <code>LaunchCPL.totalCPLContext</code>
///   </li>
/// </ul>
/// \code
/// // main.swift
/// LighthouseCPL.beginCPLMeasurement()
///
/// // ...
/// UIApplicationMain(argc, argv, nil, NSStringFromClass(AppDelegate.self))
///
/// \endcode\code
/// // AppDelegate.swift
///  func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
///     *
///      // Do normal setup code
///      // ...
///
///      // End of function, measure elapsed time
///     LighthouseCPL.addCPLSplit( section: CPLTimingSplit.appLaunchComplete )
///  }
///
/// \endcode
+ (void)beginCPLMeasurement;
/// End the tracking of cold launch CPL.
/// <ul>
///   <li>
///     Usage:
///   </li>
/// </ul>
/// \code
/// // RootViewController.swift
///
/// func firstPageReadyForUse () {
///
///     // Mark the final section until first point app can be used
///     LighthouseCPL.addCPLSplit( section: CPLTimingSplit.homeScreenLoaded )
///
///     // Complete the measurement and submit the event
///     LighthouseCPL.endCPLMeasurement( params : ["Login" : "First Time", "page"  "Home Screen" ] )
///
/// }
///
/// \endcode\param params Extra data to send with the event
///
+ (void)endCPLMeasurementWithParams:(NSDictionary<NSString *, id> * _Nullable)params;
/// Add predefined segments to your CPL timing.
+ (BOOL)addCPLSplitWithSection:(enum CPLTimingSplit)section error:(NSError * _Nullable * _Nullable)error;
/// Pauses the cpl meausurement
+ (void)pauseCPL;
/// Resumes the cpl measurement
+ (void)resumeCPL;
/// Cancel the cpl measurement
+ (void)cancelCPL;
@end


SWIFT_CLASS("_TtC4FPTI13LighthouseCPL")
@interface LighthouseCPL : NSObject <LighthouseMeasurementCPL>
+ (void)pauseCPL;
+ (void)resumeCPL;
+ (void)cancelCPL;
+ (BOOL)addCPLSplitWithSection:(enum CPLTimingSplit)section error:(NSError * _Nullable * _Nullable)error;
+ (void)beginCPLMeasurement;
+ (void)endCPLMeasurementWithParams:(NSDictionary<NSString *, id> * _Nullable)params;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Protocol for creating a management object for all active timers in the app.
/// note:
/// startMark, finishMark are equivalent to getTimer and createTimer.
/// note:
/// createTimer, getTimer, registerTimer to be deprecated in 4.0.0
SWIFT_PROTOCOL("_TtP4FPTI32LighthouseMeasurementContainable_")
@protocol LighthouseMeasurementContainable
/// Singleton accessor for our measurement containing object.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <LighthouseMeasurementContainable> _Nonnull shared;)
+ (id <LighthouseMeasurementContainable> _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Create a timing mark by key.
/// \param name The key by which you may refer to this mark
///
- (LatencyTimer * _Nonnull)startMarkWithName:(NSString * _Nonnull)name;
- (LatencyTimer * _Nonnull)startMarkWithName:(NSString * _Nonnull)name startTime:(CFTimeInterval)startTime;
/// Create and start a timer, allowing for a parent tag. Children are used to group multiple timers together in a single event.
/// \param name The key by which you may refer to this mark
///
/// \param parentName The key that was used to create a parent timer. If none is found, NO TIMER WILL BE CREATED.
///
- (BOOL)startMarkWithName:(NSString * _Nonnull)name parentName:(NSString * _Nonnull)parentName error:(NSError * _Nullable * _Nullable)error SWIFT_AVAILABILITY(ios,deprecated=4.0.0,message="Use LighthouseMeasurements.shared.addSplit ( named name: String, toParent parentName : String )");
/// Create and start a timer, allowing for a parent tag. Children are used to group multiple timers together in a single event.
/// \param name The key by which you may refer to this mark
///
/// \param parentName The key that was used to create a parent timer. If none is found, NO TIMER WILL BE CREATED.
///
/// \param startTime A provided start time in the case that the start time is not exactly now.
///
- (BOOL)startMarkWithName:(NSString * _Nonnull)name parentName:(NSString * _Nonnull)parentName startTime:(CFTimeInterval)startTime error:(NSError * _Nullable * _Nullable)error SWIFT_AVAILABILITY(ios,deprecated=4.0.0,message="Use LighthouseMeasurements.shared.addSplit ( named name: String, toParent parentName : String )");
/// Mark the time passed since timer start or last child in a parent timer. Children are used to group multiple timers together in a single event.
/// \param named The key by which you may refer to this mark
///
/// \param toParent The key that was used to create a parent timer. If none is found, NO TIMER WILL BE CREATED.
///
- (BOOL)addSplitWithNamed:(NSString * _Nonnull)name toParent:(NSString * _Nonnull)parentName error:(NSError * _Nullable * _Nullable)error;
/// Stop a timing mark by key and tracks the event
/// <ul>
///   <li>
///     Returns the timer now that its been updated.
///   </li>
/// </ul>
/// \param name The key by which you may refer to this mark
///
/// \param params Extra data to send with the event
///
- (LatencyTimer * _Nullable)finishMarkWithName:(NSString * _Nonnull)name params:(NSDictionary<NSString *, id> * _Nullable)params;
/// Stop a timing mark by key. Will also end the final child timer if it is running.
/// note:
/// Recommend using <code>finishMark(name: String, params : [String:Any]? ) -> LatencyTimer?</code> instead, as it will immediately submit the event to FPTI.
/// <ul>
///   <li>
///     Returns the timer now that its been updated.
///   </li>
/// </ul>
/// \param name The key by which you may refer to this mark
///
- (LatencyTimer * _Nullable)finishMarkWithName:(NSString * _Nonnull)name;
/// Pauses a timer and all children.
/// <ul>
///   <li>
///     Returns LatencyTimer instance or nil
///   </li>
/// </ul>
/// \param name The name of the timer previously created
///
- (LatencyTimer * _Nullable)pauseMarkWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Resumes a timer and all children.
/// <ul>
///   <li>
///     Returns LatencyTimer instance or nil
///   </li>
/// </ul>
/// \param name Resumes a timer if it was previously paused
///
- (LatencyTimer * _Nullable)resumeMarkWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Removes a timer completely
/// \param name Name of the timer
///
- (void)cancelMarkWithName:(NSString * _Nonnull)name;
/// Allows for custom timer objects to be registered that conform to the LatencyMeasurement protocol
/// \param customTimer Measurable instance for when a custom Measurable object is desired
///
- (void)registerTimerWithCustomTimer:(LatencyTimer * _Nonnull)customTimer SWIFT_AVAILABILITY(ios,deprecated=4.0.0,message="Use LighthouseMeasurements.shared.startMark ( name: String )");
/// When a timer is created it will be added to the active tracker by context key.
/// This is how one retrieves it to send as an event.
/// <ul>
///   <li>
///     Returns LatencyTimer instance or nil.
///   </li>
/// </ul>
/// \param named String Context key used to create the timer
///
- (LatencyTimer * _Nullable)getTimerWithNamed:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Create a new latency timer for any occasion. This will be stored and managed by the default tracker.
/// note:
/// To be deprecated in 4.0.0
/// <ul>
///   <li>
///     Returns LatencyTimer instance.
///   </li>
/// </ul>
/// \param context String Context for discerning this timer from others.
///
/// \param startImmediately Bool Start this timer now?
///
- (LatencyTimer * _Nonnull)createTimerWithNamed:(NSString * _Nonnull)name startImmediately:(BOOL)startImmediately SWIFT_AVAILABILITY(ios,deprecated=4.0.0);
@end


SWIFT_CLASS("_TtC4FPTI22LighthouseMeasurements")
@interface LighthouseMeasurements : NSObject <LighthouseMeasurementContainable>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <LighthouseMeasurementContainable> _Nonnull shared;)
+ (id <LighthouseMeasurementContainable> _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (LatencyTimer * _Nonnull)startMarkWithName:(NSString * _Nonnull)name;
- (LatencyTimer * _Nonnull)startMarkWithName:(NSString * _Nonnull)name startTime:(CFTimeInterval)startTime;
- (BOOL)startMarkWithName:(NSString * _Nonnull)name parentName:(NSString * _Nonnull)parentName error:(NSError * _Nullable * _Nullable)error;
- (BOOL)startMarkWithName:(NSString * _Nonnull)name parentName:(NSString * _Nonnull)parentName startTime:(CFTimeInterval)startTime error:(NSError * _Nullable * _Nullable)error;
- (BOOL)addSplitWithNamed:(NSString * _Nonnull)name toParent:(NSString * _Nonnull)parentName error:(NSError * _Nullable * _Nullable)error;
- (LatencyTimer * _Nullable)finishMarkWithName:(NSString * _Nonnull)name;
- (LatencyTimer * _Nullable)finishMarkWithName:(NSString * _Nonnull)name params:(NSDictionary<NSString *, id> * _Nullable)params;
- (LatencyTimer * _Nullable)pauseMarkWithName:(NSString * _Nonnull)name;
- (LatencyTimer * _Nullable)resumeMarkWithName:(NSString * _Nonnull)name;
- (void)cancelMarkWithName:(NSString * _Nonnull)name;
- (LatencyTimer * _Nullable)getTimerWithNamed:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (void)registerTimerWithCustomTimer:(LatencyTimer * _Nonnull)customTimer;
- (LatencyTimer * _Nonnull)createTimerWithNamed:(NSString * _Nonnull)name startImmediately:(BOOL)startImmediately;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface LighthouseMeasurements (SWIFT_EXTENSION(FPTI))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_PROTOCOL("_TtP4FPTI6Logger_")
@protocol Logger
- (void)info:(id _Nonnull)msg;
- (void)debug:(id _Nonnull)msg;
- (void)error:(id _Nonnull)msg;
- (void)warning:(id _Nonnull)msg;
@end







/// Operation to save tacked event to our datastore. When an event is tracked, a local couchbase
/// instance stores the event params along with a session id that is maintained and required for FPTI.
/// The event is not immediately sent to FPTI. We leave that part to the tracker itself to keep track of when
/// to send this event.
/// All auto logged parameters are generated by the @FPTIPayloadModel class.
SWIFT_CLASS("_TtC4FPTI19TrackEventOperation")
@interface TrackEventOperation : NSOperation
- (void)main;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface UIViewController (SWIFT_EXTENSION(FPTI))
/// Implementation for UIViewController viewDidAppear along with FPTI Logging.
/// call the Actual View Load first and then call our tracker’s method.
/// Configuring views to track is mandatory for this step. Otherwise, we ignore
/// any track call we receive.
/// @param animated: Bool
- (void)trackableViewDidAppear:(BOOL)animated;
/// View disappearing imp
/// \param animated Bool
///
- (void)trackableViewDidDisappear:(BOOL)animated;
@end








#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FPTI",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// This plugin will maintain a list of class names that have been requested for tracking.
SWIFT_CLASS("_TtC4FPTI17AutoLoggingPlugin")
@interface AutoLoggingPlugin : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, CPLTimingSplit, closed) {
  CPLTimingSplitPreMain = 0,
  CPLTimingSplitAppLaunchComplete = 1,
  CPLTimingSplitHomeScreenLoaded = 2,
  CPLTimingSplitAuthComplete = 3,
};


/// Defines a User Identifier for ELMO. Users for ELMO can be of the following Types :
/// Signed In users ( Account ID )
/// Guid
/// Device ID
SWIFT_PROTOCOL("_TtP4FPTI14UserIdentifier_")
@protocol UserIdentifier
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
@property (nonatomic, readonly, copy) NSString * _Nonnull identifierValue;
@end


SWIFT_CLASS("_TtC4FPTI16DeviceIdentifier")
@interface DeviceIdentifier : NSObject <UserIdentifier>
@property (nonatomic, copy) NSString * _Nonnull key;
@property (nonatomic, copy) NSString * _Nonnull identifierValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Wrapper for Sending Events to the Batch FPTI Server. Initialize this class with a network manager and an event to send.
SWIFT_CLASS("_TtC4FPTI22DispatchEventOperation")
@interface DispatchEventOperation : NSOperation
/// Main function for an Operation object. This is what will be called when the operation is executed.
/// For our purposes, this basically just means that we will send out the events to the batch endpoint.
- (void)main;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC4FPTI22EncryptedAccountNumber")
@interface EncryptedAccountNumber : NSObject <UserIdentifier>
@property (nonatomic, copy) NSString * _Nonnull key;
@property (nonatomic, copy) NSString * _Nonnull identifierValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Sends all FPTI events that are saved in our local store.
/// Since we don’t want a huge payload to be sent over the network, we have to limit the results that
/// we get from our database. This method iteratively fetches ‘n’ number of records from the local store,
/// generate a batch and send it to FPTI.
/// IF FPTI tracking service supports paylaod compressions, we will also try to compress and send the
/// payload.
SWIFT_CLASS("_TtC4FPTI18FPTIBatchOperation")
@interface FPTIBatchOperation : NSOperation
/// This Operation fetches any events that are present in our local Sqlite cache and tries to send it to FPTI.
/// While trying to do so, we query our cache in small sizes and send them in micro-batches. So let’s say if we
/// were to have 100 events cached in our database, we would pick 10 at a time and perform a network call. This
/// number is configurable by the developer.
/// There can be two kinds of errors that may occour while using this method.
/// Error while fetching events / deleting events from our local cache.
/// Error while sending them over the network.
/// In case of network failures, we reinsert these events in the cache and try again later.
/// In case of other errors, we just discard the ‘micro-batch’.
- (void)main;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC4FPTI18FPTINetworkAdapter")
@interface FPTINetworkAdapter : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNotification;
@protocol Logger;

/// <h1>Represents an FPTI Tracker that is capable of tracking events sent to</h1>
/// This Tracker uses the FPTI Batch Tracking API to send data to the server.
/// To enable batching and ensuring persistance, we use a caching layer that keeps the cached data
/// on disk. This will be evicted as soon as the batch size reaches or the timer expires.
/// @note : FPTI (First Party Tracking Infrastructure)
SWIFT_CLASS("_TtC4FPTI11FPTITracker")
@interface FPTITracker : NSObject
/// Objc accessor for singleton
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FPTITracker * _Nonnull sharedInstance;)
+ (FPTITracker * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull urlEndpoint;
- (void)setupTrackingWithRootView:(NSString * _Nonnull)rootView;
/// Flushes any saved events in the database to the server. This method also batches events while
/// sending events over the network and doesn’t send everything at once to avoid any huge payloads.
/// \code
/// Although the large events paylaod scenario is very less probable with our auto flush modes and
/// batch event count monitoring, this takes care of everything independently.
///
/// \endcode
- (void)flushDataWithIsDispatchOnBackgroundNotification:(BOOL)isDispatchOnBackgroundNotification;
/// Sets the tracker Batch Size for FPTI Tracking. This is the max queue size that we will flush
/// events after. We don’t keep any event references in memory. It’s just a counter that triggers an
/// event. Apart from the batch size,the application also initializes a timer that flushes data at
/// regular intervals.
- (void)setBatchSizeWithBufferSize:(NSInteger)bufferSize;
- (void)enableFlushOnLaunch;
- (void)disableFlushOnLaunch;
/// Sets the interval for which we will send the events automatically to the server.
/// This method invalidates the existing timer and starts a new one after the specified duration.
- (void)setFlushIntervalWithFlushTimerIntervalInSeconds:(NSTimeInterval)flushTimerIntervalInSeconds;
/// Invalidates the timer that is associated with this tracker.
/// This can be re enabled by using the setFlushInterval method with the specified timer
/// interval and the app will start firing again.
- (void)disableAutoFlush;
/// Initialize a new session and send a launch event to FPTI.
/// Fire an event if this is not the first time launch.
- (void)appWillBecomeForeGround:(NSNotification * _Nonnull)_;
/// Perform the following operations upon App Launch.
/// Send an event to FPTI
/// If an option flushOnLaunch is Set, then flush all events immediately.
- (void)appDidfinishLaunching:(NSNotification * _Nonnull)_;
- (void)applicationDidEnterBackground:(NSNotification * _Nonnull)_;
- (void)applicationWillBeTerminated:(NSNotification * _Nonnull)_;
- (void)setUserWithUserIdentifier:(NSString * _Nonnull)userIdentifier;
- (void)setLoggerWithLogger:(id <Logger> _Nonnull)logger;
/// Allow client to configure the host domain for where data should flow.
/// The path will remain the same with <code>v1/tracking/batch/events</code>.
/// Failed url generation will result in the default value being used for either Debug or Release modes.
/// \code
///  *- Warning : Not for general use. Please avoid altering this url unless you have a VERY good reason.
///  *- Parameter url : Overriding the default url, string format.
///
/// \endcode
- (void)setUrlWithUrl:(NSString * _Nonnull)url;
/// Send lifecycle events ( default )
- (void)enableLifecycleTracking;
/// Don’t sent lifecycle events
- (void)disableLifecycleTracking;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface FPTITracker (SWIFT_EXTENSION(FPTI))
/// Make a particular parameter persist across this app run. This will filter through
/// the keys / values you have provided and update / add them.
/// <ul>
///   <li>
///     Deprecated: v4.0.0. Use instead <code>setGlobalEventParams</code>.
///   </li>
/// </ul>
- (void)setCustomDictionaryForEvents:(NSDictionary<NSString *, id> * _Nonnull)eventsDicts;
/// Get the current list of persistent parameters set by the client.
/// <ul>
///   <li>
///     Introduced: v3.4.0
///   </li>
/// </ul>
///
/// returns:
/// Current list of persistent parameters.
- (NSDictionary<NSString *, id> * _Nonnull)getGlobalEventParams SWIFT_WARN_UNUSED_RESULT;
@end




@interface FPTITracker (SWIFT_EXTENSION(FPTI))
/// Notification posted when the session id updates.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull FPTITrackerSessionUpdateNotification;)
+ (NSNotificationName _Nonnull)FPTITrackerSessionUpdateNotification SWIFT_WARN_UNUSED_RESULT;
@end

@protocol Measurable;

@interface FPTITracker (SWIFT_EXTENSION(FPTI))
/// Track a timing mark for any measurement. Tracks as a generic type of measurement event (“pf”).
/// <ul>
///   <li>
///     Parameters params : Additional data to pass with the event
///   </li>
/// </ul>
/// \param timer The latency timer you were using to track this particular event
///
- (void)trackLatencyUsing:(id <Measurable> _Nonnull)timer params:(NSDictionary<NSString *, id> * _Nullable)params;
/// Simplest version of the <code>trackEvent</code> function.
/// \param eventType Corresponds to <code>evnt_type</code> tag. Recommend using simple values, such as “im” or “cl”
///
/// \param params Dictionary of data that can be passed with this event.
///
- (void)trackEvent:(NSString * _Nonnull)eventType with:(NSDictionary<NSString *, id> * _Nonnull)params;
@end






SWIFT_CLASS("_TtC4FPTI18GUIDUserIdentifier")
@interface GUIDUserIdentifier : NSObject <UserIdentifier>
@property (nonatomic, copy) NSString * _Nonnull key;
@property (nonatomic, copy) NSString * _Nonnull identifierValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC4FPTI27InMemoryFPTICacheController")
@interface InMemoryFPTICacheController : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class LatencyPayload;

/// Generic timing struct protocol for capturing latency, and other timing
/// meausuremnents.
/// @note: Main purpose is for CPL (Customer Perceived Latency). This generally is referring
/// to the time between the app starting and when the client app considers that the app is ready
/// to be used.
SWIFT_PROTOCOL("_TtP4FPTI10Measurable_")
@protocol Measurable
/// Differentiator for use with multiple measurements
@property (nonatomic, copy) NSString * _Nonnull name;
/// An optional string that can be used for the event key if context is not desired.
@property (nonatomic, copy) NSString * _Nullable tagKey;
/// Time recorded for start of time measurement
@property (nonatomic, readonly) CFTimeInterval start;
/// Time recorded for end of time measurement
@property (nonatomic, readonly) CFTimeInterval end;
/// Whether the timer has been paused already
@property (nonatomic, readonly) BOOL paused;
/// Accumulated difference in time between start and end in seconds, accounting for pause / resume.
@property (nonatomic, readonly) CFTimeInterval elapsed;
/// Flag in case someone accidentally wants to reuse this timer
@property (nonatomic, readonly) BOOL stale;
/// This should be a call to CACurrentMediaTime. Can be accessed at any time and will give a monotonous count of time.
/// Converts mach_absolute_time() to seconds.
/// @note: We are not using CFAbsoluteTimeGetCurrent() as this has variance in it (see documentation
@property (nonatomic, readonly) CFTimeInterval currentTime;
/// Generates a payload object based on this timer’s information
@property (nonatomic, readonly, strong) LatencyPayload * _Nonnull payload;
/// Mark the start of a time measurement
- (void)startMeasurement;
/// Mark the end of a time measurement and return the elapsed time.
- (CFTimeInterval)endMeasurement;
/// “Pause” the timer by aggregating our elapsed time up until now and flagging self as paused.
- (void)pauseMeasurement;
/// “Resume” the timer by resetting the start time if it was paused.
- (void)resumeMeasurement;
@end


/// Simple timer with a little sugar for marking start and end times.
/// Intended to have multiple instances, each with their own context (name) value. They should be
/// registered with the default tracker for continued use.
SWIFT_CLASS("_TtC4FPTI12LatencyTimer")
@interface LatencyTimer : NSObject <Measurable>
@property (nonatomic, readonly) CFTimeInterval currentTime;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nullable tagKey;
@property (nonatomic) CFTimeInterval start;
@property (nonatomic) CFTimeInterval end;
@property (nonatomic) CFTimeInterval elapsed;
@property (nonatomic, readonly) BOOL stale;
@property (nonatomic) BOOL paused;
@property (nonatomic, readonly, strong) LatencyPayload * _Nonnull payload;
- (void)startMeasurement;
- (CFTimeInterval)endMeasurement;
- (void)pauseMeasurement;
- (void)resumeMeasurement;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface LatencyTimer (SWIFT_EXTENSION(FPTI))
@end


/// Generate a payload that is codable to JSON for submission to server
SWIFT_CLASS("_TtCC4FPTI12LatencyTimer14LatencyPayload")
@interface LatencyPayload : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface LatencyTimer (SWIFT_EXTENSION(FPTI))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_PROTOCOL("_TtP4FPTI24LighthouseMeasurementCPL_")
@protocol LighthouseMeasurementCPL
/// This begins our cold launch timer, and will include premain time.
/// <ul>
///   <li>
///     Fetches premain time as compared with DYLD_STATISTICS env flag.
///   </li>
///   <li>
///     Creates a LatencyTimer using the premain start time as its beginning, and offset by the thread time expended up to this point
///     to adjust similarly as Apple does. This is as close as we’ll get to DYLD_STATISTICS.
///   </li>
///   <li>
///     The context of this timer is <code>LaunchCPL.totalCPLContext</code>
///   </li>
///   <li>
///     Segment future points into this timer with this parent conext : <code>LaunchCPL.totalCPLContext</code>
///   </li>
/// </ul>
/// \code
/// // main.swift
/// LighthouseCPL.beginCPLMeasurement()
///
/// // ...
/// UIApplicationMain(argc, argv, nil, NSStringFromClass(AppDelegate.self))
///
/// \endcode\code
/// // AppDelegate.swift
///  func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
///     *
///      // Do normal setup code
///      // ...
///
///      // End of function, measure elapsed time
///     LighthouseCPL.addCPLSplit( section: CPLTimingSplit.appLaunchComplete )
///  }
///
/// \endcode
+ (void)beginCPLMeasurement;
/// End the tracking of cold launch CPL.
/// <ul>
///   <li>
///     Usage:
///   </li>
/// </ul>
/// \code
/// // RootViewController.swift
///
/// func firstPageReadyForUse () {
///
///     // Mark the final section until first point app can be used
///     LighthouseCPL.addCPLSplit( section: CPLTimingSplit.homeScreenLoaded )
///
///     // Complete the measurement and submit the event
///     LighthouseCPL.endCPLMeasurement( params : ["Login" : "First Time", "page"  "Home Screen" ] )
///
/// }
///
/// \endcode\param params Extra data to send with the event
///
+ (void)endCPLMeasurementWithParams:(NSDictionary<NSString *, id> * _Nullable)params;
/// Add predefined segments to your CPL timing.
+ (BOOL)addCPLSplitWithSection:(enum CPLTimingSplit)section error:(NSError * _Nullable * _Nullable)error;
/// Pauses the cpl meausurement
+ (void)pauseCPL;
/// Resumes the cpl measurement
+ (void)resumeCPL;
/// Cancel the cpl measurement
+ (void)cancelCPL;
@end


SWIFT_CLASS("_TtC4FPTI13LighthouseCPL")
@interface LighthouseCPL : NSObject <LighthouseMeasurementCPL>
+ (void)pauseCPL;
+ (void)resumeCPL;
+ (void)cancelCPL;
+ (BOOL)addCPLSplitWithSection:(enum CPLTimingSplit)section error:(NSError * _Nullable * _Nullable)error;
+ (void)beginCPLMeasurement;
+ (void)endCPLMeasurementWithParams:(NSDictionary<NSString *, id> * _Nullable)params;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Protocol for creating a management object for all active timers in the app.
/// note:
/// startMark, finishMark are equivalent to getTimer and createTimer.
/// note:
/// createTimer, getTimer, registerTimer to be deprecated in 4.0.0
SWIFT_PROTOCOL("_TtP4FPTI32LighthouseMeasurementContainable_")
@protocol LighthouseMeasurementContainable
/// Singleton accessor for our measurement containing object.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <LighthouseMeasurementContainable> _Nonnull shared;)
+ (id <LighthouseMeasurementContainable> _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Create a timing mark by key.
/// \param name The key by which you may refer to this mark
///
- (LatencyTimer * _Nonnull)startMarkWithName:(NSString * _Nonnull)name;
- (LatencyTimer * _Nonnull)startMarkWithName:(NSString * _Nonnull)name startTime:(CFTimeInterval)startTime;
/// Create and start a timer, allowing for a parent tag. Children are used to group multiple timers together in a single event.
/// \param name The key by which you may refer to this mark
///
/// \param parentName The key that was used to create a parent timer. If none is found, NO TIMER WILL BE CREATED.
///
- (BOOL)startMarkWithName:(NSString * _Nonnull)name parentName:(NSString * _Nonnull)parentName error:(NSError * _Nullable * _Nullable)error SWIFT_AVAILABILITY(ios,deprecated=4.0.0,message="Use LighthouseMeasurements.shared.addSplit ( named name: String, toParent parentName : String )");
/// Create and start a timer, allowing for a parent tag. Children are used to group multiple timers together in a single event.
/// \param name The key by which you may refer to this mark
///
/// \param parentName The key that was used to create a parent timer. If none is found, NO TIMER WILL BE CREATED.
///
/// \param startTime A provided start time in the case that the start time is not exactly now.
///
- (BOOL)startMarkWithName:(NSString * _Nonnull)name parentName:(NSString * _Nonnull)parentName startTime:(CFTimeInterval)startTime error:(NSError * _Nullable * _Nullable)error SWIFT_AVAILABILITY(ios,deprecated=4.0.0,message="Use LighthouseMeasurements.shared.addSplit ( named name: String, toParent parentName : String )");
/// Mark the time passed since timer start or last child in a parent timer. Children are used to group multiple timers together in a single event.
/// \param named The key by which you may refer to this mark
///
/// \param toParent The key that was used to create a parent timer. If none is found, NO TIMER WILL BE CREATED.
///
- (BOOL)addSplitWithNamed:(NSString * _Nonnull)name toParent:(NSString * _Nonnull)parentName error:(NSError * _Nullable * _Nullable)error;
/// Stop a timing mark by key and tracks the event
/// <ul>
///   <li>
///     Returns the timer now that its been updated.
///   </li>
/// </ul>
/// \param name The key by which you may refer to this mark
///
/// \param params Extra data to send with the event
///
- (LatencyTimer * _Nullable)finishMarkWithName:(NSString * _Nonnull)name params:(NSDictionary<NSString *, id> * _Nullable)params;
/// Stop a timing mark by key. Will also end the final child timer if it is running.
/// note:
/// Recommend using <code>finishMark(name: String, params : [String:Any]? ) -> LatencyTimer?</code> instead, as it will immediately submit the event to FPTI.
/// <ul>
///   <li>
///     Returns the timer now that its been updated.
///   </li>
/// </ul>
/// \param name The key by which you may refer to this mark
///
- (LatencyTimer * _Nullable)finishMarkWithName:(NSString * _Nonnull)name;
/// Pauses a timer and all children.
/// <ul>
///   <li>
///     Returns LatencyTimer instance or nil
///   </li>
/// </ul>
/// \param name The name of the timer previously created
///
- (LatencyTimer * _Nullable)pauseMarkWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Resumes a timer and all children.
/// <ul>
///   <li>
///     Returns LatencyTimer instance or nil
///   </li>
/// </ul>
/// \param name Resumes a timer if it was previously paused
///
- (LatencyTimer * _Nullable)resumeMarkWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Removes a timer completely
/// \param name Name of the timer
///
- (void)cancelMarkWithName:(NSString * _Nonnull)name;
/// Allows for custom timer objects to be registered that conform to the LatencyMeasurement protocol
/// \param customTimer Measurable instance for when a custom Measurable object is desired
///
- (void)registerTimerWithCustomTimer:(LatencyTimer * _Nonnull)customTimer SWIFT_AVAILABILITY(ios,deprecated=4.0.0,message="Use LighthouseMeasurements.shared.startMark ( name: String )");
/// When a timer is created it will be added to the active tracker by context key.
/// This is how one retrieves it to send as an event.
/// <ul>
///   <li>
///     Returns LatencyTimer instance or nil.
///   </li>
/// </ul>
/// \param named String Context key used to create the timer
///
- (LatencyTimer * _Nullable)getTimerWithNamed:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Create a new latency timer for any occasion. This will be stored and managed by the default tracker.
/// note:
/// To be deprecated in 4.0.0
/// <ul>
///   <li>
///     Returns LatencyTimer instance.
///   </li>
/// </ul>
/// \param context String Context for discerning this timer from others.
///
/// \param startImmediately Bool Start this timer now?
///
- (LatencyTimer * _Nonnull)createTimerWithNamed:(NSString * _Nonnull)name startImmediately:(BOOL)startImmediately SWIFT_AVAILABILITY(ios,deprecated=4.0.0);
@end


SWIFT_CLASS("_TtC4FPTI22LighthouseMeasurements")
@interface LighthouseMeasurements : NSObject <LighthouseMeasurementContainable>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <LighthouseMeasurementContainable> _Nonnull shared;)
+ (id <LighthouseMeasurementContainable> _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (LatencyTimer * _Nonnull)startMarkWithName:(NSString * _Nonnull)name;
- (LatencyTimer * _Nonnull)startMarkWithName:(NSString * _Nonnull)name startTime:(CFTimeInterval)startTime;
- (BOOL)startMarkWithName:(NSString * _Nonnull)name parentName:(NSString * _Nonnull)parentName error:(NSError * _Nullable * _Nullable)error;
- (BOOL)startMarkWithName:(NSString * _Nonnull)name parentName:(NSString * _Nonnull)parentName startTime:(CFTimeInterval)startTime error:(NSError * _Nullable * _Nullable)error;
- (BOOL)addSplitWithNamed:(NSString * _Nonnull)name toParent:(NSString * _Nonnull)parentName error:(NSError * _Nullable * _Nullable)error;
- (LatencyTimer * _Nullable)finishMarkWithName:(NSString * _Nonnull)name;
- (LatencyTimer * _Nullable)finishMarkWithName:(NSString * _Nonnull)name params:(NSDictionary<NSString *, id> * _Nullable)params;
- (LatencyTimer * _Nullable)pauseMarkWithName:(NSString * _Nonnull)name;
- (LatencyTimer * _Nullable)resumeMarkWithName:(NSString * _Nonnull)name;
- (void)cancelMarkWithName:(NSString * _Nonnull)name;
- (LatencyTimer * _Nullable)getTimerWithNamed:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (void)registerTimerWithCustomTimer:(LatencyTimer * _Nonnull)customTimer;
- (LatencyTimer * _Nonnull)createTimerWithNamed:(NSString * _Nonnull)name startImmediately:(BOOL)startImmediately;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface LighthouseMeasurements (SWIFT_EXTENSION(FPTI))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_PROTOCOL("_TtP4FPTI6Logger_")
@protocol Logger
- (void)info:(id _Nonnull)msg;
- (void)debug:(id _Nonnull)msg;
- (void)error:(id _Nonnull)msg;
- (void)warning:(id _Nonnull)msg;
@end







/// Operation to save tacked event to our datastore. When an event is tracked, a local couchbase
/// instance stores the event params along with a session id that is maintained and required for FPTI.
/// The event is not immediately sent to FPTI. We leave that part to the tracker itself to keep track of when
/// to send this event.
/// All auto logged parameters are generated by the @FPTIPayloadModel class.
SWIFT_CLASS("_TtC4FPTI19TrackEventOperation")
@interface TrackEventOperation : NSOperation
- (void)main;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface UIViewController (SWIFT_EXTENSION(FPTI))
/// Implementation for UIViewController viewDidAppear along with FPTI Logging.
/// call the Actual View Load first and then call our tracker’s method.
/// Configuring views to track is mandatory for this step. Otherwise, we ignore
/// any track call we receive.
/// @param animated: Bool
- (void)trackableViewDidAppear:(BOOL)animated;
/// View disappearing imp
/// \param animated Bool
///
- (void)trackableViewDidDisappear:(BOOL)animated;
@end








#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
